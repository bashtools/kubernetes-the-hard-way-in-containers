.TS # KTHW 10 Configuring kubetcl for Remote Access
.TS 
.TS ![](../images/kthw-10.gif)
.TS
.TS View the [screencast file](../screencasts/kthw-10.scr)
.TS
.TS ```
.MD >  **Kubernetes the Hard Way using My Own Kind**
.MD > 
.MD > View a [screencast and transcript](kthw-10-transcript.md)
screencast delay 18
screencast clear
screencast paste
# ---------------------------------------------------------
screencast paste
# Kubernetes the Hard Way - using `mokctl` from My Own Kind
screencast paste
# ---------------------------------------------------------
screencast paste
# 10-configuring-kubectl.md
screencast paste
# Configure kubectl for accessing outside of the cluster
screencast prompt %$#

.MD # Configuring kubectl for Remote Access
.MD 
.MD In this lab you will generate a kubeconfig file for the `kubectl` command line utility based on the `admin` user credentials.
.MD 
.MD > Run the commands in this lab from the same directory used to generate the admin client certificates.
.MD 
.MD ## The Admin Kubernetes Configuration File
.MD 
.MD Each kubeconfig requires a Kubernetes API Server to connect to. To support high availability the IP address assigned to the external load balancer fronting the Kubernetes API Servers will be used.
.MD 
.MD First we need to log back in to the docker container we created earlier:
.MD
.MD ```
# Log into the docker container:
docker exec -ti kthw bash
.MD ```
.MD 
.MD Change to the `/certs` directory, which is volume mounted to the host:
.MD
.MD ```
# Change to the directory where the certs were copied:
cd /certs
.MD ```
.MD
.MD Generate a kubeconfig file suitable for authenticating as the `admin` user:
.MD 
.MD ```
# Create the kubeconfig file
screencast paste begin
{
  KUBERNETES_PUBLIC_ADDRESS=$(grep kthw-lb /certs/cluster-list.txt | awk '{ print $NF; }')

  kubectl config set-cluster kubernetes-the-hard-way \
    --certificate-authority=ca.pem \
    --embed-certs=true \
    --server=https://${KUBERNETES_PUBLIC_ADDRESS}:6443

  kubectl config set-credentials admin \
    --client-certificate=admin.pem \
    --client-key=admin-key.pem

  kubectl config set-context kubernetes-the-hard-way \
    --cluster=kubernetes-the-hard-way \
    --user=admin

  kubectl config use-context kubernetes-the-hard-way
}
screencast paste end
.MD ```
.MD 
.MD ## Verification

# Verification

.MD 
.MD Check the health of the remote Kubernetes cluster:
.MD 
.MD ```
# Use kubectl to check cluster health:
screencast paste
kubectl get componentstatuses
# Looks good :)
.MD ```
.MD 
.MD > output
.MD 
.MD ```
.MD NAME                 STATUS    MESSAGE             ERROR
.MD controller-manager   Healthy   ok
.MD scheduler            Healthy   ok
.MD etcd-1               Healthy   {"health":"true"}
.MD etcd-2               Healthy   {"health":"true"}
.MD etcd-0               Healthy   {"health":"true"}
.MD ```
.MD 
.MD List the nodes in the remote Kubernetes cluster:
.MD 
.MD ```
# List nodes:
screencast paste
kubectl get nodes
# Great!
.MD ```
.MD 
.MD > output
.MD 
.MD ```
.MD NAME            STATUS   ROLES    AGE    VERSION
.MD kthw-worker-1   Ready    <none>   2m9s   v1.15.3
.MD kthw-worker-2   Ready    <none>   2m9s   v1.15.3
.MD kthw-worker-3   Ready    <none>   2m9s   v1.15.3
.MD ```
.MD 
.MD Finally, log out of the container:
.MD
.MD ```
exit
.MD ```
.MD

# All done :)

# -------------------------------------
# Next: Provisioning Pod Network Routes
screencast paste
# -------------------------------------
.MD Next: [Provisioning Pod Network Routes](11-pod-network-routes.md)
.TS ```
